# =========================
# Flight state monitoring
# monitor_state is called after search_and_set_parameter completes dragging
# Returns (uncontrolled_bool, max_alt)
# =========================
def monitor_state(master, duration=OBSERVE_TIME, param_name=None):
    last_heartbeat = time.time()
    last_print = 0
    current_mode = None
    mission_idx = None
    lat = lon = alt = None
    max_alt = 0.0
    uncontrolled = False

    start_time = time.time()
    if param_name:
        print(f"[监控] 开始监听飞行状态，观察 {duration} 秒 (参数: {param_name})")
    else:
        print(f"[监控] 开始监听飞行状态，观察 {duration} 秒")

    while time.time() - start_time < duration:
        msg = master.recv_match(blocking=True, timeout=1)
        now = time.time()
        if not msg:
            continue
        msg_type = msg.get_type()
        if msg_type == "HEARTBEAT":
            last_heartbeat = now
            try:
                current_mode = mavutil.mode_string_v10(msg)
            except Exception:
                current_mode = None
        if msg_type == "MISSION_CURRENT":
            mission_idx = msg.seq
        if msg_type == "GLOBAL_POSITION_INT":
            lat = msg.lat / 1e7
            lon = msg.lon / 1e7
            alt = msg.relative_alt / 1000.0
            max_alt = max(max_alt, alt)
        if msg_type == "ATTITUDE":
            roll = abs(msg.roll)
            pitch = abs(msg.pitch)
            if roll > SAFE_ROLL or pitch > SAFE_PITCH:
                print(f"[报警] 姿态超限! roll={math.degrees(roll):.1f}°, pitch={math.degrees(pitch):.1f}°")
                try:
                    master.set_mode(master.mode_mapping().get("HOLD"))
                except Exception:
                    pass
                uncontrolled = True
                break
        if now - last_heartbeat > HEARTBEAT_TIMEOUT:
            print("[报警] 心跳丢失 > 3秒，疑似失联！")
            try:
                master.set_mode(master.mode_mapping().get("HOLD"))
            except Exception:
                pass
            last_heartbeat = now
            uncontrolled = True
            break
        if alt is not None and alt > MAX_ALT:
            print(f"[报警] 高度过高 ({alt:.1f} m) -> 判为失控")
            uncontrolled = True
            break
        if now - last_print >= 1:
            last_print = now
            if lat is not None and lon is not None and alt is not None:
                if param_name:
                    print(f"[状态] 参数={param_name}, mode={current_mode}, mission_idx={mission_idx}, "
                          f"lat={lat:.7f}, lon={lon:.7f}, alt={alt:.2f} m")
                else:
                    print(f"[状态] mode={current_mode}, mission_idx={mission_idx}, "
                          f"lat={lat:.7f}, lon={lon:.7f}, alt={alt:.2f} m")
            else:
                print(f"[状态] mode={current_mode}, mission_idx={mission_idx}, 等待位置数据 ...")

    return uncontrolled, max_alt

def wait_for_landing(master, check_interval=2):
    """
    等待飞机安全降落（alt < 0.5 m 或 LAND 模式）
    """
    print("[等待] 飞机失控，等待安全降落...")
    while True:
        msg = master.recv_match(blocking=True, timeout=1)
        if not msg:
            time.sleep(check_interval)
            continue

        msg_type = msg.get_type()
        alt = None
        mode = None

        if msg_type == "GLOBAL_POSITION_INT":
            alt = msg.relative_alt / 1000.0  # 转换成米

        if msg_type == "HEARTBEAT":
            try:
                mode = mavutil.mode_string_v10(msg)
            except Exception:
                mode = None

        if alt is not None and alt <= 0.5:
            print(f"[降落完成] 高度 {alt:.2f} m，安全着陆")
            break
        elif mode and "LAND" in mode:
            print(f"[降落模式] 当前模式 {mode}，等待降落完成")
            # 可以根据需要继续监控高度
        time.sleep(check_interval)
