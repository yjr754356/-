# =========================
#UI operation. 
#Use pyautogui to gradually input values ‚Äã‚Äãon the UI, perform clicks, inputs, and finally drag (representing "takeoff/execution"). 
#If you need to adjust coordinates or delays, please modify them in this function.
# =========================
def bring_qgc_to_front():
    try:
        app = Application(backend="uia").connect(title_re=".*QGroundControl.*")
        window = app.window(title_re=".*QGroundControl.*")
        window.set_focus()
        window.minimize()
        window.restore()
        print("QGroundControl The window is pinned and active.")
        return window
    except Exception as e:
        print("Failed to connect to QGroundControlÔºö", e)
        return None

def click_qgc_button(window, button_name):
    try:
        btn = window.child_window(title=button_name, control_type="Button")
        btn.wait('ready', timeout=10)
        btn.click_input()
        print(f"Button clickedÔºö{button_name}")
    except Exception as e:
        print(f"Button click failedÔºö{button_name}ÔºåÈîôËØØÔºö{e}")

def click_in_window(window_title_re, rel_x, rel_y, click=True, double_click=False):
    desktop = Desktop(backend="uia")
    try:
        win = desktop.window(title_re=window_title_re)
        rect = win.rectangle()
    except Exception as e:
        print("Window not found:", e)
        return
    
    abs_x = rect.left + rel_x
    abs_y = rect.top + rel_y
    pyautogui.moveTo(abs_x, abs_y)
    if double_click:
        pyautogui.doubleClick()
    elif click:
        pyautogui.click()
    print(f"Click on the window '{window_title_re}' at a relative position ({rel_x}, {rel_y})")

def drag_in_window(window_title_re, start_rel, end_rel, duration=0.5):
    desktop = Desktop(backend="uia")
    try:
        win = desktop.window(title_re=window_title_re)
        rect = win.rectangle()
    except Exception as e:
        print("Window not found:", e)
        return False
    start_abs = (rect.left + start_rel[0], rect.top + start_rel[1])
    end_abs   = (rect.left + end_rel[0], rect.top + end_rel[1])
    pyautogui.moveTo(*start_abs, duration=0.2)
    pyautogui.mouseDown()
    pyautogui.moveTo(*end_abs, duration=duration)
    pyautogui.mouseUp()
    return True

def search_and_set_parameter(param_name, param_config, set_value):
    try:
        print(f"Setting parameter: {param_name} -> {set_value}")
        qgc_win = bring_qgc_to_front()
        if not qgc_win:
            exit()
        click_in_window(".*QGroundControl.*", 36, 30)
        time.sleep(0.3)
        click_qgc_button(qgc_win, "Vehicle Setup")
        time.sleep(0.3)
        click_qgc_button(qgc_win, "parameter")
        time.sleep(0.3)
        click_in_window(".*QGroundControl.*", 310, 104)
        time.sleep(0.5)
        pyautogui.hotkey("ctrl", "a")
        pyperclip.copy(param_name)
        pyautogui.hotkey("ctrl", "v")
        pyautogui.press("enter")
        time.sleep(0.8)
        click_in_window(".*QGroundControl.*", 708, 154)
        time.sleep(0.5)
        pyautogui.press("delete")
        time.sleep(0.3)
        pyautogui.typewrite(str(set_value))
        pyautogui.press("enter")
        time.sleep(0.5)
        click_in_window(".*QGroundControl.*", 36, 30)
        time.sleep(0.5)
        drag_in_window(".*QGroundControl.*", (652, 145), (1100, 155), duration=0.5)
        print(f"üëâ Parameter {param_name} has been set to {set_value} (UI operation completed)")
        return True
    except Exception as e:
        print(f"‚ùå Failed to set parameter {param_name}: {e}")
        return False
