import time
import math
import csv
import pyautogui
from pymavlink import mavutil
from pywinauto import Desktop, Application

# =========================
# Basic configuration (continued/adjustable)
# =========================
SCAN_PORTS = [14445]
HEARTBEAT_TIMEOUT = 3.0
SAFE_ROLL = math.radians(45)
SAFE_PITCH = math.radians(45)
OBSERVE_TIME = 240  # Monitoring duration after each modification (seconds)
STEPS_PER_PARAM = 5  # Number of modification steps for each parameter (excluding the 6th restoration)
OUTPUT_CSV = "results.csv"
MAX_ALT = 100.0  # Ultra-high judgment (adjustable)

def main():
    master = connect()
    if master is None:
        print("[ERROR] Failed to connect to any available port, exiting")
        return

    with open(OUTPUT_CSV, "w", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["Parameter name", "step_index", "Set value", "Out of control", "Maximum height (m)"])
        f.flush()

        for name, info in px4_parameters.items():
            print(f"\n==== Start testing parameters: {name} ====")
            seq = generate_values(info, steps=STEPS_PER_PARAM)

            for idx, val in enumerate(seq, start=1):
                ok = search_and_set_parameter(name, info, val)
                if not ok:
                    writer.writerow([name, idx, val, "set_failed", ""])
                    f.flush()
                    time.sleep(1)
                    continue

                uncontrolled, max_alt = monitor_state(master, duration=OBSERVE_TIME, param_name=name)

                time.sleep(0.5)
                writer.writerow([name, idx, val, uncontrolled, max_alt])
                f.flush()
                print(f"[Record] {name} step {idx} -> outcontrol={uncontrolled}, Maximum height={max_alt:.1f} m")
                
                # Uncontrolled writing of files to disk E
                if uncontrolled:
                    with open(UNCONTROLLED_LOG, "a", encoding="utf-8") as log_f:
                        log_f.write(f"Parameter {name} step {idx} -> out of control, maximum height {max_alt:.1f} m\n")
                        log_f.flush()

                    # Waiting for the plane to land
                    wait_for_landing(master)
                    click_in_window(".*QGroundControl.*", 929, 552)
                    time.sleep(1)
                else:
                    click_in_window(".*QGroundControl.*", 929, 552)  # ‚Üê If you are not out of control, click normally
                    time.sleep(0.5)

            default_val = info.get("default", seq[-1] if seq else 0)
            print(f"[Restore] Restore parameter {name} to default value {default_val}")
            search_and_set_parameter(name, info, default_val)
            time.sleep(1)

    print(f"\nAll parameter tests are completed and the results are saved in {OUTPUT_CSV}")

if __name__ == "__main__":
    main()
